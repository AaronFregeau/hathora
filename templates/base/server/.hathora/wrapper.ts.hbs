import onChange from "on-change";
import { Context } from "./methods";
import { Method } from "../../api/base";
import {
  UserId,
  IInitializeRequest,
  {{#each methods}}
  {{makeRequestName @key}},
  {{/each}}
} from "../../api/types";

let impl = new (await import("../impl")).Impl();
type State = ReturnType<typeof impl.initialize>;

export class ImplWrapper {
  private state: State;
  private _changedAt: number | undefined;
  constructor(ctx: Context, argsBuffer: ArrayBufferView) {
    const state = impl.initialize(ctx, IInitializeRequest.decode(argsBuffer));
    this.state = onChange(state, () => (this._changedAt = Date.now()));
  }
  async getResult(userId: UserId, method: Method, ctx: Context, argsBuffer: ArrayBufferView) {
    await tryReloadImpl();
    switch (method) {
      {{#each methods}}
      case Method.{{uppercase @key}}:
        return impl.{{@key}}(this.state, userId, ctx, {{makeRequestName @key}}.decode(argsBuffer));
      {{/each}}
    }
  }
  {{#if tick}}
  async onTick(ctx: Context, timeDelta: number) {
    await tryReloadImpl();
    impl.onTick(this.state, ctx, timeDelta);
  }
  {{/if}}
  async getUserState(userId: UserId) {
    await tryReloadImpl();
    return impl.getUserState(onChange.target(this.state), userId);
  }
  changedAt(): number | undefined {
    const res = this._changedAt;
    this._changedAt = undefined;
    return res;
  }
}

let prevError = "";
async function tryReloadImpl() {
  try {
    impl = new (await import("../impl")).Impl();
    if (prevError !== "") {
      console.log("Successfully reloaded impl");
      prevError = "";
    }
  } catch (e) {
    const errorString = (e as any).toString();
    if (errorString !== prevError) {
      console.error("Error reloading impl: " + e);
      prevError = errorString;
    }
  }
}
