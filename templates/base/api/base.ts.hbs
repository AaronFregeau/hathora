import axios from "axios";
import { UserId } from "./types";

export const NO_DIFF = Symbol("NODIFF");
export type DeepPartial<T> = T extends string | number | boolean | undefined
  ? T
  : T extends Array<infer ArrayType>
  ? Array<DeepPartial<ArrayType> | typeof NO_DIFF> | typeof NO_DIFF
  : T extends { type: string; val: any }
  ? { type: T["type"]; val: DeepPartial<T["val"] | typeof NO_DIFF> }
  : { [K in keyof T]: DeepPartial<T[K]> | typeof NO_DIFF };

export enum Method {
  {{#each methods}}
  {{#if (ne @key ../initialize)}}
  {{uppercase @key}},
  {{/if}}
  {{/each}}
}
export interface OkResponse {
  type: "ok";
}
export interface ErrorResponse {
  type: "error";
  error: {{error.typeString}};
}
export type Response = OkResponse | ErrorResponse;
export const Response: { ok: () => OkResponse; error: (error: {{error.typeString}}) => ErrorResponse } = {
  ok: () => ({
    type: "ok",
  }),
  error: (error: {{error.typeString}}) => ({
    type: "error",
    error,
  }),
};
{{#each auth}}
export interface {{capitalize @key}}UserData {
  type: "{{@key}}";
  id: string;
{{#if (eq @key "anonymous")}}
  name: string;
{{else if (eq @key "google")}}
  name: string;
  email: string;
  locale: string;
  picture: string;
{{/if}}
}
{{/each}}
export type UserData = {{#each auth}}{{capitalize @key}}UserData{{#unless @last}} | {{/unless}}{{/each}};

export function lookupUser(userId: UserId): Promise<UserData> {
  return axios.get<UserData>(`https://rtag.dev/users/${userId}`).then((res) => res.data);
}

export function getUserDisplayName(user: UserData) {
  switch (user.type) {
    {{#each auth}}
    case "{{@key}}":
      {{#if (eq @key "anonymous")}}
      return user.name;
      {{else if (eq @key "google")}}
      return user.name;
      {{else if (eq @key "email")}}
      return user.email;
      {{/if}}
    {{/each}}
  }
}
